{"version":3,"sources":["components/ScoreBoard/ScoreBoard.js","components/CardList/CardList.js","components/Card/Card.js","App.js","registerServiceWorker.js","index.js"],"names":["ScoreBoard","props","className","score","topScore","gameMessage","CardList","children","Card","onClick","handleChange","id","src","image","alt","name","key","App","shuffleArray","array","i","length","j","Math","floor","random","undefined","state","unClickedSchools","find","school","setState","schools","updatedSchools","filter","this","map","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.01d0f3f5.chunk.js","sourcesContent":["import React from \"react\";\nimport './ScoreBoard.css';\n\nconst ScoreBoard = (props) => {\n    return (\n    <nav>\n        <h1 className=\"navbar-brand\">ACC Challenge!</h1>\n        <p> Click on an ACC logo but remember which logo you choose! After clicking, the order of the logos will be shuffled. If a team logo is clicked on twice, the ACC Challenge will reset and your score will return to zero. See if you can get the top score and test your memory for all of the ACC Teams!</p>\n        <div>\n            <p><strong>Current Score: </strong>{props.score}</p>\n            <p><strong>Top Score: </strong>{props.topScore}</p>\n            <p>{props.gameMessage}</p>\n        </div>\n    </nav> \n    )\n};\n\nexport default ScoreBoard;\n","import React from 'react'; \nimport './CardList.css';\n\nconst CardList = (props) => {\n\treturn(\n\t\t<div className=\"card-list\">   \n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default CardList;\n","import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n\treturn (\n\t\t<div onClick={() => props.handleChange(props.id)}>\n\t\t\t\t<img \n\t\t\t\t\tclassName=\"card-container\" \n\t\t\t\t\tsrc={props.image} \n\t\t\t\t\talt={props.name} \n\t\t\t\t\tkey={props.id}\n\t\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport ScoreBoard from './components/ScoreBoard/ScoreBoard';\nimport CardList from './components/CardList/CardList';\nimport Card from './components/Card/Card';\nimport schools from './schools.json';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      score: 0,\n      topScore: 0,\n      gameMessage: \"Are you an ACC fan? Click an Image to begin!\",\n      schools: schools,\n      unClickedSchools: schools\n    }\n  }\n\n  // Shuffle Array\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  handleChange = (id) => {\n    // Check if the id has been chosen\n    const failedGuess = this.state.unClickedSchools.find(school => school.id === id);\n    if (failedGuess === undefined) {\n      this.setState({\n        score: 0,\n        topScore: (this.state.score > this.state.topScore) ? this.state.score : this.state.topScore,\n        gameMessage: \"Sorry wrong choice. Are you really an ACC fan? Click an image to play again!\",\n        schools: schools,\n        unClickedSchools: schools\n      });\n    } else {\n      const updatedSchools = this.state.unClickedSchools.filter(school => school.id !== id);    \n      this.setState({\n        score: this.state.score +1,\n        gameMessage: \"You know your ACC Teams! Please choose again!\",\n        schools: schools,\n        unClickedSchools: updatedSchools\n    });\n    }\n    this.shuffleArray(schools); \n  }\n\n  render() {\n    return (\n      <div>\n        <ScoreBoard\n          gameMessage= {this.state.gameMessage} \n          score={this.state.score}\n          topScore ={this.state.topScore}\n        />\n        <CardList>\n          {this.state.schools.map(school => \n            {return(\n              <Card  \n                handleChange = {this.handleChange} \n                name={school.name} \n                image={school.image} \n                id={school.id} \n                key={school.id}\n              />\n            )}\n          )}\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}